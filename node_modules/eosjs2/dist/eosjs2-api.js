// copyright defined in eosjs2/LICENSE.txt
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Api = exports.serialize = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _eosjs2Serialize = require('./eosjs2-serialize');

var ser = _interopRequireWildcard(_eosjs2Serialize);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};

var transactionAbi = require('../src/transaction.abi.json');
var serialize = exports.serialize = ser;

var Api = exports.Api = function () {
    function Api(args) {
        _classCallCheck(this, Api);

        this.contracts = new Map();
        this.rpc = args.rpc;
        this.authorityProvider = args.authorityProvider || args.rpc;
        this.signatureProvider = args.signatureProvider;
        this.chainId = args.chainId;
        this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);
    }

    _createClass(Api, [{
        key: 'getContract',
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(accountName) {
                var reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                var abi, types, actions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref2, name, type, result;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(!reload && this.contracts.get(accountName))) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.abrupt('return', this.contracts.get(accountName));

                            case 2:
                                abi = void 0;
                                _context.prev = 3;
                                _context.next = 6;
                                return this.rpc.get_abi(accountName);

                            case 6:
                                abi = _context.sent.abi;
                                _context.next = 13;
                                break;

                            case 9:
                                _context.prev = 9;
                                _context.t0 = _context['catch'](3);

                                _context.t0.message = 'fetching abi for ' + accountName + ': ' + _context.t0.message;
                                throw _context.t0;

                            case 13:
                                if (abi) {
                                    _context.next = 15;
                                    break;
                                }

                                throw new Error("Missing abi for " + accountName);

                            case 15:
                                types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);
                                actions = new Map();
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 20;

                                for (_iterator = abi.actions[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    _ref2 = _step.value;
                                    name = _ref2.name, type = _ref2.type;

                                    actions.set(name, ser.getType(types, type));
                                }_context.next = 28;
                                break;

                            case 24:
                                _context.prev = 24;
                                _context.t1 = _context['catch'](20);
                                _didIteratorError = true;
                                _iteratorError = _context.t1;

                            case 28:
                                _context.prev = 28;
                                _context.prev = 29;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 31:
                                _context.prev = 31;

                                if (!_didIteratorError) {
                                    _context.next = 34;
                                    break;
                                }

                                throw _iteratorError;

                            case 34:
                                return _context.finish(31);

                            case 35:
                                return _context.finish(28);

                            case 36:
                                result = { types: types, actions: actions };

                                this.contracts.set(accountName, result);
                                return _context.abrupt('return', result);

                            case 39:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[3, 9], [20, 24, 28, 36], [29,, 31, 35]]);
            }));

            function getContract(_x) {
                return _ref.apply(this, arguments);
            }

            return getContract;
        }()
    }, {
        key: 'serialize',
        value: function serialize(buffer, type, value) {
            this.transactionTypes.get(type).serialize(buffer, value);
        }
    }, {
        key: 'deserialize',
        value: function deserialize(buffer, type, value) {
            return this.transactionTypes.get(type).deserialize(buffer);
        }
    }, {
        key: 'serializeTransaction',
        value: function serializeTransaction(transaction) {
            var buffer = new ser.SerialBuffer();
            this.serialize(buffer, 'transaction', Object.assign({ max_net_usage_words: 0, max_cpu_usage_ms: 0, delay_sec: 0, context_free_actions: [], actions: [], transaction_extensions: [] }, transaction));
            return buffer.asUint8Array();
        }
    }, {
        key: 'serializeActions',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(actions) {
                var _this = this;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return Promise.all(actions.map(function () {
                                    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref5) {
                                        var account = _ref5.account,
                                            name = _ref5.name,
                                            authorization = _ref5.authorization,
                                            data = _ref5.data;
                                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        _context2.t0 = ser;
                                                        _context2.next = 3;
                                                        return _this.getContract(account);

                                                    case 3:
                                                        _context2.t1 = _context2.sent;
                                                        _context2.t2 = account;
                                                        _context2.t3 = name;
                                                        _context2.t4 = authorization;
                                                        _context2.t5 = data;
                                                        return _context2.abrupt('return', _context2.t0.serializeAction.call(_context2.t0, _context2.t1, _context2.t2, _context2.t3, _context2.t4, _context2.t5));

                                                    case 9:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this);
                                    }));

                                    return function (_x4) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 2:
                                return _context3.abrupt('return', _context3.sent);

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function serializeActions(_x3) {
                return _ref3.apply(this, arguments);
            }

            return serializeActions;
        }()
    }, {
        key: 'pushTransaction',
        value: function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_a) {
                var blocksBehind, expireSeconds, actions, transaction, info, refBlock, serializedTransaction, availableKeys, requiredKeys, signatures;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                blocksBehind = _a.blocksBehind, expireSeconds = _a.expireSeconds, actions = _a.actions, transaction = __rest(_a, ["blocksBehind", "expireSeconds", "actions"]);
                                info = void 0;

                                if (this.chainId) {
                                    _context4.next = 7;
                                    break;
                                }

                                _context4.next = 5;
                                return this.rpc.get_info();

                            case 5:
                                info = _context4.sent;

                                this.chainId = info.chain_id;

                            case 7:
                                if (!(blocksBehind !== undefined && expireSeconds !== undefined)) {
                                    _context4.next = 16;
                                    break;
                                }

                                if (info) {
                                    _context4.next = 12;
                                    break;
                                }

                                _context4.next = 11;
                                return this.rpc.get_info();

                            case 11:
                                info = _context4.sent;

                            case 12:
                                _context4.next = 14;
                                return this.rpc.get_block(info.head_block_num - blocksBehind);

                            case 14:
                                refBlock = _context4.sent;

                                transaction = Object.assign({}, ser.transactionHeader(refBlock, expireSeconds), transaction);

                            case 16:
                                _context4.t0 = Object;
                                _context4.t1 = {};
                                _context4.t2 = transaction;
                                _context4.next = 21;
                                return this.serializeActions(actions);

                            case 21:
                                _context4.t3 = _context4.sent;
                                _context4.t4 = {
                                    actions: _context4.t3
                                };
                                transaction = _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2, _context4.t4);
                                serializedTransaction = this.serializeTransaction(transaction);
                                _context4.next = 27;
                                return this.signatureProvider.getAvailableKeys();

                            case 27:
                                availableKeys = _context4.sent;
                                _context4.next = 30;
                                return this.authorityProvider.getRequiredKeys({ transaction: transaction, availableKeys: availableKeys });

                            case 30:
                                requiredKeys = _context4.sent;
                                _context4.next = 33;
                                return this.signatureProvider.sign({ chainId: this.chainId, requiredKeys: requiredKeys, serializedTransaction: serializedTransaction });

                            case 33:
                                signatures = _context4.sent;
                                _context4.next = 36;
                                return this.rpc.push_transaction({
                                    signatures: signatures,
                                    serializedTransaction: serializedTransaction
                                });

                            case 36:
                                return _context4.abrupt('return', _context4.sent);

                            case 37:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function pushTransaction(_x5) {
                return _ref6.apply(this, arguments);
            }

            return pushTransaction;
        }()
    }]);

    return Api;
}(); // Api
//# sourceMappingURL=eosjs2-api.js.map