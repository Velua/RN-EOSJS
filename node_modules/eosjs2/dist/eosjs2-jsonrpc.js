'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// copyright defined in eosjs2/LICENSE.txt
var RpcError = exports.RpcError = function (_Error) {
    _inherits(RpcError, _Error);

    function RpcError(json) {
        _classCallCheck(this, RpcError);

        if (json.error && json.error.details && json.error.details.length && json.error.details[0].message) {
            ;

            var _this = _possibleConstructorReturn(this, (RpcError.__proto__ || Object.getPrototypeOf(RpcError)).call(this, json.error.details[0].message));
        } else if (json.processed && json.processed.except && json.processed.except.message) {
            ;

            var _this = _possibleConstructorReturn(this, (RpcError.__proto__ || Object.getPrototypeOf(RpcError)).call(this, json.processed.except.message));
        } else {
            ;

            var _this = _possibleConstructorReturn(this, (RpcError.__proto__ || Object.getPrototypeOf(RpcError)).call(this, json.message));
        }_this.json = json;
        return _possibleConstructorReturn(_this);
    }

    return RpcError;
}(Error);

;
function arrayToHex(data) {
    var result = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var x = _step.value;

            result += ('00' + x.toString(16)).slice(-2);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return result;
}

var JsonRpc = exports.JsonRpc = function () {
    function JsonRpc(endpoint) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, JsonRpc);

        this.endpoint = endpoint;
        if (args.fetch) this.fetchBuiltin = args.fetch;else this.fetchBuiltin = global.fetch;
    }

    _createClass(JsonRpc, [{
        key: 'fetch',
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, body) {
                var response, json, f;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                response = void 0, json = void 0;
                                _context.prev = 1;
                                f = this.fetchBuiltin;
                                _context.next = 5;
                                return f(this.endpoint + path, {
                                    body: JSON.stringify(body),
                                    method: 'POST'
                                });

                            case 5:
                                response = _context.sent;
                                _context.next = 8;
                                return response.json();

                            case 8:
                                json = _context.sent;

                                if (!(json.processed && json.processed.except)) {
                                    _context.next = 11;
                                    break;
                                }

                                throw new RpcError(json);

                            case 11:
                                _context.next = 17;
                                break;

                            case 13:
                                _context.prev = 13;
                                _context.t0 = _context['catch'](1);

                                _context.t0.isFetchError = true;
                                throw _context.t0;

                            case 17:
                                if (response.ok) {
                                    _context.next = 19;
                                    break;
                                }
                                throw new RpcError(json);

                            case 19:
                                return _context.abrupt('return', json);

                            case 20:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[1, 13]]);
            }));

            function fetch(_x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return fetch;
        }()
    }, {
        key: 'get_abi',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(account_name) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.fetch('/v1/chain/get_abi', { account_name: account_name });

                            case 2:
                                return _context2.abrupt('return', _context2.sent);

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function get_abi(_x4) {
                return _ref2.apply(this, arguments);
            }

            return get_abi;
        }()
    }, {
        key: 'get_account',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(account_name) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.fetch('/v1/chain/get_account', { account_name: account_name });

                            case 2:
                                return _context3.abrupt('return', _context3.sent);

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function get_account(_x5) {
                return _ref3.apply(this, arguments);
            }

            return get_account;
        }()
    }, {
        key: 'get_block_header_state',
        value: function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(block_num_or_id) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return this.fetch('/v1/chain/get_block_header_state', { block_num_or_id: block_num_or_id });

                            case 2:
                                return _context4.abrupt('return', _context4.sent);

                            case 3:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function get_block_header_state(_x6) {
                return _ref4.apply(this, arguments);
            }

            return get_block_header_state;
        }()
    }, {
        key: 'get_block',
        value: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(block_num_or_id) {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.fetch('/v1/chain/get_block', { block_num_or_id: block_num_or_id });

                            case 2:
                                return _context5.abrupt('return', _context5.sent);

                            case 3:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function get_block(_x7) {
                return _ref5.apply(this, arguments);
            }

            return get_block;
        }()
    }, {
        key: 'get_code',
        value: function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(account_name) {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return this.fetch('/v1/chain/get_code', { account_name: account_name });

                            case 2:
                                return _context6.abrupt('return', _context6.sent);

                            case 3:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function get_code(_x8) {
                return _ref6.apply(this, arguments);
            }

            return get_code;
        }()
    }, {
        key: 'get_currency_balance',
        value: function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(code, account) {
                var symbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return this.fetch('/v1/chain/get_currency_balance', { code: code, account: account, symbol: symbol });

                            case 2:
                                return _context7.abrupt('return', _context7.sent);

                            case 3:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function get_currency_balance(_x9, _x10) {
                return _ref7.apply(this, arguments);
            }

            return get_currency_balance;
        }()
    }, {
        key: 'get_currency_stats',
        value: function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(code, symbol) {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return this.fetch('/v1/chain/get_currency_stats', { code: code, symbol: symbol });

                            case 2:
                                return _context8.abrupt('return', _context8.sent);

                            case 3:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function get_currency_stats(_x12, _x13) {
                return _ref8.apply(this, arguments);
            }

            return get_currency_stats;
        }()
    }, {
        key: 'get_info',
        value: function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return this.fetch('/v1/chain/get_info', {});

                            case 2:
                                return _context9.abrupt('return', _context9.sent);

                            case 3:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function get_info() {
                return _ref9.apply(this, arguments);
            }

            return get_info;
        }()
    }, {
        key: 'get_producer_schedule',
        value: function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                _context10.next = 2;
                                return this.fetch('/v1/chain/get_producer_schedule', {});

                            case 2:
                                return _context10.abrupt('return', _context10.sent);

                            case 3:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function get_producer_schedule() {
                return _ref10.apply(this, arguments);
            }

            return get_producer_schedule;
        }()
    }, {
        key: 'get_producers',
        value: function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                var lower_bound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                _context11.next = 2;
                                return this.fetch('/v1/chain/get_producers', { json: json, lower_bound: lower_bound, limit: limit });

                            case 2:
                                return _context11.abrupt('return', _context11.sent);

                            case 3:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function get_producers() {
                return _ref11.apply(this, arguments);
            }

            return get_producers;
        }()
    }, {
        key: 'get_table_rows',
        value: function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(_ref13) {
                var _ref13$json = _ref13.json,
                    json = _ref13$json === undefined ? true : _ref13$json,
                    code = _ref13.code,
                    scope = _ref13.scope,
                    table = _ref13.table,
                    _ref13$table_key = _ref13.table_key,
                    table_key = _ref13$table_key === undefined ? '' : _ref13$table_key,
                    _ref13$lower_bound = _ref13.lower_bound,
                    lower_bound = _ref13$lower_bound === undefined ? '' : _ref13$lower_bound,
                    _ref13$upper_bound = _ref13.upper_bound,
                    upper_bound = _ref13$upper_bound === undefined ? '' : _ref13$upper_bound,
                    _ref13$limit = _ref13.limit,
                    limit = _ref13$limit === undefined ? 10 : _ref13$limit;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                _context12.next = 2;
                                return this.fetch('/v1/chain/get_table_rows', {
                                    json: json,
                                    code: code,
                                    scope: scope,
                                    table: table,
                                    table_key: table_key,
                                    lower_bound: lower_bound,
                                    upper_bound: upper_bound,
                                    limit: limit
                                });

                            case 2:
                                return _context12.abrupt('return', _context12.sent);

                            case 3:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function get_table_rows(_x17) {
                return _ref12.apply(this, arguments);
            }

            return get_table_rows;
        }()
    }, {
        key: 'getRequiredKeys',
        value: function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(args) {
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                _context13.next = 2;
                                return this.fetch('/v1/chain/get_required_keys', {
                                    transaction: args.transaction,
                                    available_keys: args.availableKeys
                                });

                            case 2:
                                return _context13.abrupt('return', _context13.sent.required_keys);

                            case 3:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            function getRequiredKeys(_x18) {
                return _ref14.apply(this, arguments);
            }

            return getRequiredKeys;
        }()
    }, {
        key: 'push_transaction',
        value: function () {
            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(_ref16) {
                var signatures = _ref16.signatures,
                    serializedTransaction = _ref16.serializedTransaction;
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return this.fetch('/v1/chain/push_transaction', {
                                    signatures: signatures,
                                    compression: 0,
                                    packed_context_free_data: '',
                                    packed_trx: arrayToHex(serializedTransaction)
                                });

                            case 2:
                                return _context14.abrupt('return', _context14.sent);

                            case 3:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            function push_transaction(_x19) {
                return _ref15.apply(this, arguments);
            }

            return push_transaction;
        }()
    }, {
        key: 'db_size_get',
        value: function () {
            var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                _context15.next = 2;
                                return this.fetch('/v1/db_size/get', {});

                            case 2:
                                return _context15.abrupt('return', _context15.sent);

                            case 3:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, this);
            }));

            function db_size_get() {
                return _ref17.apply(this, arguments);
            }

            return db_size_get;
        }()
    }, {
        key: 'history_get_actions',
        value: function () {
            var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(account_name) {
                var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                _context16.next = 2;
                                return this.fetch('/v1/history/get_actions', { account_name: account_name, pos: pos, offset: offset });

                            case 2:
                                return _context16.abrupt('return', _context16.sent);

                            case 3:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _callee16, this);
            }));

            function history_get_actions(_x20) {
                return _ref18.apply(this, arguments);
            }

            return history_get_actions;
        }()
    }, {
        key: 'history_get_transaction',
        value: function () {
            var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(id) {
                var block_num_hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                _context17.next = 2;
                                return this.fetch('/v1/history/get_transaction', { id: id, block_num_hint: block_num_hint });

                            case 2:
                                return _context17.abrupt('return', _context17.sent);

                            case 3:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _callee17, this);
            }));

            function history_get_transaction(_x23) {
                return _ref19.apply(this, arguments);
            }

            return history_get_transaction;
        }()
    }, {
        key: 'history_get_key_accounts',
        value: function () {
            var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(public_key) {
                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                _context18.next = 2;
                                return this.fetch('/v1/history/get_key_accounts', { public_key: public_key });

                            case 2:
                                return _context18.abrupt('return', _context18.sent);

                            case 3:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _callee18, this);
            }));

            function history_get_key_accounts(_x25) {
                return _ref20.apply(this, arguments);
            }

            return history_get_key_accounts;
        }()
    }, {
        key: 'history_get_controlled_accounts',
        value: function () {
            var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(controlling_account) {
                return regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                _context19.next = 2;
                                return this.fetch('/v1/history/get_controlled_accounts', { controlling_account: controlling_account });

                            case 2:
                                return _context19.abrupt('return', _context19.sent);

                            case 3:
                            case 'end':
                                return _context19.stop();
                        }
                    }
                }, _callee19, this);
            }));

            function history_get_controlled_accounts(_x26) {
                return _ref21.apply(this, arguments);
            }

            return history_get_controlled_accounts;
        }()
    }]);

    return JsonRpc;
}(); // JsonRpc
//# sourceMappingURL=eosjs2-jsonrpc.js.map